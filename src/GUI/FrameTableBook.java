/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAL.BookDAL;
import DTO.BookDTO;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hoangtuan
 */
public class FrameTableBook extends javax.swing.JFrame {

    public static ArrayList<BookDTO> listbook = new ArrayList<BookDTO>();
    DefaultTableModel dftBook;

    /**
     * Creates new form FrameTableBook
     */
    public FrameTableBook() {
        initComponents();
        dftBook = (DefaultTableModel) tbBook.getModel();
        loadBook();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbBook = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSearchBook = new javax.swing.JTextField();
        btnSearchBook = new javax.swing.JButton();
        btnSaveBookId = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Sách", "Tên Sách", "Mã Loại", "Mã NXB", "Mã Tác Giả", "Năm XB", "Số Lượng", "Mã Kệ"
            }
        ));
        jScrollPane1.setViewportView(tbBook);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Tìm Kiếm");

        btnSearchBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/12_search.png"))); // NOI18N
        btnSearchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBookActionPerformed(evt);
            }
        });

        btnSaveBookId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSaveBookId.setText("Lưu");
        btnSaveBookId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBookIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40)
                        .addComponent(txtSearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnSearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(btnSaveBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnSaveBookId)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBookActionPerformed

        try {

            if (txtSearchBook.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập vào nội dung !");
                loadBook();
                return;
            }
            int id;
            String s = txtSearchBook.getText().toLowerCase();
            if (isNumeric(s)) {
                // Nếu chuỗi nhập vào là số, thì tìm kiếm theo mã sách
                id = Integer.parseInt(s);
            } else {
                // Nếu chuỗi nhập vào không phải là số, thì tìm kiếm theo tên sách
                id = -1; // Đặt id = -1 để không tìm kiếm theo mã sách
            }
            listbook = null;
            listbook = BookDAL.getAllBook();
            dftBook.setRowCount(0);
            for (BookDTO bk : listbook) {
                if (id == -1 && bk.getBookname().toLowerCase().contains(s)) {
                    // Tìm kiếm theo tên sách
                    Vector<Object> vec = new Vector<Object>();
                    vec.add(bk.getBookid());
                    vec.add(bk.getBookname());
                    vec.add(bk.getAuthorid());
                    vec.add(bk.getPublishid());
                    vec.add(bk.getCategoryid());
                    vec.add(bk.getPublishyear());
                    vec.add(bk.getQuantity());
                    vec.add(bk.getBookshelfid());
                    vec.add(bk.getImage());
                    dftBook.addRow(vec);
                } else if (id != -1 && id == bk.getBookid()) {
                    // Tìm kiếm theo mã sách
                    Vector<Object> vec = new Vector<Object>();
                    vec.add(bk.getBookid());
                    vec.add(bk.getBookname());
                    vec.add(bk.getAuthorid());
                    vec.add(bk.getPublishid());
                    vec.add(bk.getCategoryid());
                    vec.add(bk.getPublishyear());
                    vec.add(bk.getQuantity());
                    vec.add(bk.getBookshelfid());
                    vec.add(bk.getImage());
                    dftBook.addRow(vec);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnSearchBookActionPerformed

    private void btnSaveBookIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBookIdActionPerformed
        int i = tbBook.getSelectedRow();
        if (i >= 0) {
            String book_id = dftBook.getValueAt(i, 0).toString();
            CouponGUI.txtBookIdCoupon.setText(book_id);
            BorrowGUI.txtBookIdBorrow.setText(book_id);
            dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Chưa chọn vào table");
        }

    }//GEN-LAST:event_btnSaveBookIdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameTableBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameTableBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameTableBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameTableBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameTableBook().setVisible(true);
            }
        });
    }

    public void loadBook() {
        listbook = null;
        listbook = BookDAL.getAllBook();
        dftBook.setRowCount(0);
        for (BookDTO book : listbook) {
            Vector<Object> vec = new Vector<Object>();
            vec.add(book.getBookid());
            vec.add(book.getBookname());
            vec.add(book.getCategoryid());
            vec.add(book.getPublishid());
            vec.add(book.getAuthorid());
            vec.add(book.getPublishyear());
            vec.add(book.getQuantity());
            vec.add(book.getBookshelfid());
            dftBook.addRow(vec);
        }
    }

    private boolean isNumeric(String str) {
        if (str == null || str.length() == 0) {
            return false;
        }
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveBookId;
    private javax.swing.JButton btnSearchBook;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBook;
    private javax.swing.JTextField txtSearchBook;
    // End of variables declaration//GEN-END:variables
}
